package osmutil

import (
	"encoding/xml"
	"io"
	"strings"

	"github.com/paulmach/go.osm"
	"golang.org/x/net/context"
)

// ChangesetScanner provides a convenient interface reading a stream of changesets
// from a file or url. Successive calls to the Scan method will step through the changesets.
//
// Scanning stops unrecoverably at EOF, the first I/O error, the first xml error or
// the context being cancelled. When a scan stops, the reader may have advanced
// arbitrarily far past the last token.
//
// The ChangesetScanner API is based on bufio.Scanner
// https://golang.org/pkg/bufio/#Scanner
type ChangesetScanner struct {
	ctx     context.Context
	decoder *xml.Decoder
	next    *osm.Changeset
	err     error
}

// NewChangesetScanner returns a new Scanner to read from r.
func NewChangesetScanner(ctx context.Context, r io.Reader) *ChangesetScanner {
	if ctx == nil {
		ctx = context.Background()
	}

	return &ChangesetScanner{
		ctx:     ctx,
		decoder: xml.NewDecoder(r),
	}
}

// Scan advances the Scanner to the next changeset, which will then be available
// through the Changeset method. It returns false when the scan stops, either
// by reaching the end of the input, an io error, an xml error or the context
// being cancelled.  After Scan returns false, the Err method will return any
// error that occurred during scanning, except that if it was io.EOF, Err will
// return nil.
func (s *ChangesetScanner) Scan() bool {
	if s.err != nil {
		return false
	}

	for {
		if s.ctx.Err() != nil {
			return false
		}

		t, err := s.decoder.Token()
		if err != nil {
			s.err = err
			return false
		}

		se, ok := t.(xml.StartElement)
		if !ok {
			continue
		}

		if strings.ToLower(se.Name.Local) == "changeset" {
			s.next = &osm.Changeset{}
			err = s.decoder.DecodeElement(&s.next, &se)
			if err != nil {
				s.err = err
				return false
			}

			return true
		}
	}
}

// Changeset returns the most recent token generated by a call to Scan
// as a newly allocated changeset object.
func (s *ChangesetScanner) Changeset() *osm.Changeset {
	return s.next
}

// Err returns the first non-EOF error that was encountered by the Scanner.
func (s *ChangesetScanner) Err() error {
	if s.err == io.EOF {
		return nil
	}

	if s.err != nil {
		return s.err
	}

	return s.ctx.Err()
}
