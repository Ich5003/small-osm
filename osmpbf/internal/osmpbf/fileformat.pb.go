// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fileformat.proto

package osmpbf

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Blob struct {
	Raw     []byte `protobuf:"bytes,1,opt,name=raw" json:"raw"`
	RawSize int32  `protobuf:"varint,2,opt,name=raw_size,json=rawSize" json:"raw_size"`
	// Possible compressed versions of the data.
	ZlibData []byte `protobuf:"bytes,3,opt,name=zlib_data,json=zlibData" json:"zlib_data"`
	// PROPOSED feature for LZMA compressed data. SUPPORT IS NOT REQUIRED.
	LzmaData []byte `protobuf:"bytes,4,opt,name=lzma_data,json=lzmaData" json:"lzma_data"`
	// Formerly used for bzip2 compressed data. Depreciated in 2010.
	OBSOLETEBzip2Data []byte `protobuf:"bytes,5,opt,name=OBSOLETE_bzip2_data,json=OBSOLETEBzip2Data" json:"OBSOLETE_bzip2_data"` // Deprecated: Do not use.
}

func (m *Blob) Reset()         { *m = Blob{} }
func (m *Blob) String() string { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()    {}
func (*Blob) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8d315ffecccb459, []int{0}
}
func (m *Blob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blob.Merge(m, src)
}
func (m *Blob) XXX_Size() int {
	return m.Size()
}
func (m *Blob) XXX_DiscardUnknown() {
	xxx_messageInfo_Blob.DiscardUnknown(m)
}

var xxx_messageInfo_Blob proto.InternalMessageInfo

func (m *Blob) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Blob) GetRawSize() int32 {
	if m != nil {
		return m.RawSize
	}
	return 0
}

func (m *Blob) GetZlibData() []byte {
	if m != nil {
		return m.ZlibData
	}
	return nil
}

func (m *Blob) GetLzmaData() []byte {
	if m != nil {
		return m.LzmaData
	}
	return nil
}

// Deprecated: Do not use.
func (m *Blob) GetOBSOLETEBzip2Data() []byte {
	if m != nil {
		return m.OBSOLETEBzip2Data
	}
	return nil
}

type BlobHeader struct {
	Type      string `protobuf:"bytes,1,req,name=type" json:"type"`
	Indexdata []byte `protobuf:"bytes,2,opt,name=indexdata" json:"indexdata"`
	Datasize  int32  `protobuf:"varint,3,req,name=datasize" json:"datasize"`
}

func (m *BlobHeader) Reset()         { *m = BlobHeader{} }
func (m *BlobHeader) String() string { return proto.CompactTextString(m) }
func (*BlobHeader) ProtoMessage()    {}
func (*BlobHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8d315ffecccb459, []int{1}
}
func (m *BlobHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlobHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlobHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlobHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobHeader.Merge(m, src)
}
func (m *BlobHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlobHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlobHeader proto.InternalMessageInfo

func (m *BlobHeader) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BlobHeader) GetIndexdata() []byte {
	if m != nil {
		return m.Indexdata
	}
	return nil
}

func (m *BlobHeader) GetDatasize() int32 {
	if m != nil {
		return m.Datasize
	}
	return 0
}

func init() {
	proto.RegisterType((*Blob)(nil), "osmpbf.Blob")
	proto.RegisterType((*BlobHeader)(nil), "osmpbf.BlobHeader")
}

func init() { proto.RegisterFile("fileformat.proto", fileDescriptor_f8d315ffecccb459) }

var fileDescriptor_f8d315ffecccb459 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x41, 0x6b, 0xb3, 0x30,
	0x1c, 0xc6, 0x8d, 0xda, 0xbe, 0xfa, 0xe7, 0x1d, 0x6c, 0x19, 0x8c, 0x9c, 0x52, 0xe7, 0x65, 0x9e,
	0x7a, 0xd8, 0x61, 0x1f, 0x40, 0x56, 0xd8, 0x61, 0x50, 0x68, 0x77, 0x97, 0x64, 0x46, 0x08, 0x68,
	0x23, 0x51, 0x70, 0xfa, 0x29, 0xf6, 0x85, 0x76, 0xef, 0xb1, 0xc7, 0x9d, 0xc6, 0xd0, 0x2f, 0x32,
	0x62, 0xbb, 0xce, 0x53, 0xe0, 0x97, 0xdf, 0x93, 0x3c, 0x0f, 0x5c, 0x66, 0x32, 0x17, 0x99, 0xd2,
	0x05, 0xab, 0x97, 0xa5, 0x56, 0xb5, 0xc2, 0x73, 0x55, 0x15, 0x25, 0xcf, 0xc2, 0x0f, 0x04, 0x6e,
	0x9c, 0x2b, 0x8e, 0x6f, 0xc0, 0xd1, 0xac, 0x21, 0x28, 0x40, 0xd1, 0xff, 0xd8, 0xdd, 0x7f, 0x2d,
	0xac, 0x8d, 0x01, 0x78, 0x01, 0x9e, 0x66, 0x4d, 0x52, 0xc9, 0x4e, 0x10, 0x3b, 0x40, 0xd1, 0xec,
	0x74, 0xf9, 0x4f, 0xb3, 0x66, 0x2b, 0x3b, 0x81, 0x6f, 0xc1, 0xef, 0x72, 0xc9, 0x93, 0x94, 0xd5,
	0x8c, 0x38, 0x93, 0xb8, 0x67, 0xf0, 0x23, 0xab, 0x99, 0x51, 0xf2, 0xae, 0x60, 0x47, 0xc5, 0x9d,
	0x2a, 0x06, 0x8f, 0xca, 0x03, 0x5c, 0xaf, 0xe3, 0xed, 0xfa, 0x79, 0xf5, 0xb2, 0x4a, 0x78, 0x27,
	0xcb, 0xfb, 0xa3, 0x3c, 0x1b, 0xe5, 0xb9, 0x91, 0x09, 0xda, 0x5c, 0xfd, 0x2a, 0xb1, 0x31, 0x4c,
	0x2e, 0xcc, 0x01, 0x4c, 0xfd, 0x27, 0xc1, 0x52, 0xa1, 0x31, 0x01, 0xb7, 0x6e, 0x4b, 0x41, 0x50,
	0x60, 0x47, 0xfe, 0xe9, 0x8f, 0x91, 0xe0, 0x10, 0x7c, 0xb9, 0x4b, 0xc5, 0xdb, 0xf8, 0xaa, 0x3d,
	0xa9, 0xf0, 0x87, 0x71, 0x00, 0x9e, 0x39, 0xc7, 0xa9, 0x4e, 0x60, 0x9f, 0xa7, 0x9e, 0x69, 0x7c,
	0xb7, 0xef, 0x29, 0x3a, 0xf4, 0x14, 0x7d, 0xf7, 0x14, 0xbd, 0x0f, 0xd4, 0x3a, 0x0c, 0xd4, 0xfa,
	0x1c, 0xa8, 0x05, 0x17, 0xaf, 0x5a, 0x55, 0xbc, 0x5d, 0x72, 0xb9, 0x63, 0xba, 0xfd, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x83, 0x61, 0x1f, 0xdf, 0x71, 0x01, 0x00, 0x00,
}

func (m *Blob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blob) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Blob) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OBSOLETEBzip2Data != nil {
		i -= len(m.OBSOLETEBzip2Data)
		copy(dAtA[i:], m.OBSOLETEBzip2Data)
		i = encodeVarintFileformat(dAtA, i, uint64(len(m.OBSOLETEBzip2Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LzmaData != nil {
		i -= len(m.LzmaData)
		copy(dAtA[i:], m.LzmaData)
		i = encodeVarintFileformat(dAtA, i, uint64(len(m.LzmaData)))
		i--
		dAtA[i] = 0x22
	}
	if m.ZlibData != nil {
		i -= len(m.ZlibData)
		copy(dAtA[i:], m.ZlibData)
		i = encodeVarintFileformat(dAtA, i, uint64(len(m.ZlibData)))
		i--
		dAtA[i] = 0x1a
	}
	i = encodeVarintFileformat(dAtA, i, uint64(m.RawSize))
	i--
	dAtA[i] = 0x10
	if m.Raw != nil {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintFileformat(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlobHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlobHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlobHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintFileformat(dAtA, i, uint64(m.Datasize))
	i--
	dAtA[i] = 0x18
	if m.Indexdata != nil {
		i -= len(m.Indexdata)
		copy(dAtA[i:], m.Indexdata)
		i = encodeVarintFileformat(dAtA, i, uint64(len(m.Indexdata)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintFileformat(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFileformat(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileformat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Blob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw != nil {
		l = len(m.Raw)
		n += 1 + l + sovFileformat(uint64(l))
	}
	n += 1 + sovFileformat(uint64(m.RawSize))
	if m.ZlibData != nil {
		l = len(m.ZlibData)
		n += 1 + l + sovFileformat(uint64(l))
	}
	if m.LzmaData != nil {
		l = len(m.LzmaData)
		n += 1 + l + sovFileformat(uint64(l))
	}
	if m.OBSOLETEBzip2Data != nil {
		l = len(m.OBSOLETEBzip2Data)
		n += 1 + l + sovFileformat(uint64(l))
	}
	return n
}

func (m *BlobHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovFileformat(uint64(l))
	if m.Indexdata != nil {
		l = len(m.Indexdata)
		n += 1 + l + sovFileformat(uint64(l))
	}
	n += 1 + sovFileformat(uint64(m.Datasize))
	return n
}

func sovFileformat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileformat(x uint64) (n int) {
	return sovFileformat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Blob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileformat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawSize", wireType)
			}
			m.RawSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RawSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZlibData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZlibData = append(m.ZlibData[:0], dAtA[iNdEx:postIndex]...)
			if m.ZlibData == nil {
				m.ZlibData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LzmaData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LzmaData = append(m.LzmaData[:0], dAtA[iNdEx:postIndex]...)
			if m.LzmaData == nil {
				m.LzmaData = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OBSOLETEBzip2Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OBSOLETEBzip2Data = append(m.OBSOLETEBzip2Data[:0], dAtA[iNdEx:postIndex]...)
			if m.OBSOLETEBzip2Data == nil {
				m.OBSOLETEBzip2Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileformat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileformat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileformat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlobHeader) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileformat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlobHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlobHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexdata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileformat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileformat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexdata = append(m.Indexdata[:0], dAtA[iNdEx:postIndex]...)
			if m.Indexdata == nil {
				m.Indexdata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datasize", wireType)
			}
			m.Datasize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datasize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipFileformat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileformat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFileformat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("datasize")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileformat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileformat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileformat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileformat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileformat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileformat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileformat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileformat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileformat = fmt.Errorf("proto: unexpected end of group")
)
